"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExternalActions = createExternalActions;
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _createTypes = _interopRequireDefault(require("../../creators/createTypes"));

var _commonReducer = _interopRequireWildcard(require("./commonReducer"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var INVISIBLE_NAMESPACE = '$INVISIBLE';

var getSuperNamespace = function getSuperNamespace(actionName) {
  return actionName.slice(0, actionName.indexOf(':'));
};

var shouldBeExtended = function shouldBeExtended(action) {
  return getSuperNamespace(action.type) === INVISIBLE_NAMESPACE;
};

var getSliceName = function getSliceName(action, reducerObject) {
  var sliceName = action.type.slice(action.type.indexOf(':') + 1, action.type.indexOf('/')).replace('#', '').toLowerCase();
  Object.keys(reducerObject).forEach(function (reducerName) {
    if (reducerName.toLowerCase() === sliceName) sliceName = reducerName;
  });
  return sliceName;
};

var formatActionName = function formatActionName(actionName) {
  return actionName.slice(actionName.indexOf('/') + 1);
};

function wrapCombineReducers(CR) {
  var invisibleReducer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _commonReducer["default"];

  function combineReducers(reducerObject) {
    return function () {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var action = arguments.length > 1 ? arguments[1] : undefined;
      if (!shouldBeExtended(action)) return CR(reducerObject)(state, action);
      var slice = getSliceName(action, reducerObject);
      return _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2["default"])({}, slice, invisibleReducer(state[slice], _objectSpread(_objectSpread({}, action), {}, {
        type: formatActionName(action.type)
      }))));
    };
  }

  return combineReducers;
}

function createExternalActions(reducerName) {
  var actionNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _commonReducer.defaultActionNames;
  return (0, _createTypes["default"])(actionNames, "".concat(INVISIBLE_NAMESPACE, ":#").concat(reducerName.toUpperCase()));
}

var _default = wrapCombineReducers;
exports["default"] = _default;