"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _externalBaseAction = _interopRequireDefault(require("../injections/externalBaseAction"));

var _baseThunkAction = _interopRequireDefault(require("../injections/baseThunkAction"));

var _emptyThunkAction = _interopRequireDefault(require("../injections/emptyThunkAction"));

var _singleCallThunkAction = _interopRequireDefault(require("../injections/singleCallThunkAction"));

var _composeInjections = _interopRequireDefault(require("../injections/composeInjections"));

var _mergeInjections = _interopRequireDefault(require("../injections/mergeInjections"));

var _pollingAction = _interopRequireDefault(require("../injections/pollingAction"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ensembleInjections = function ensembleInjections(action) {
  var base;

  if (action.external) {
    base = (0, _externalBaseAction["default"])(action);
  } else if (!action.type) {
    base = (0, _singleCallThunkAction["default"])(action);
  } else if (action.shouldRetry) {
    base = (0, _pollingAction["default"])(action);
  } else {
    base = action.target ? (0, _baseThunkAction["default"])(action) : (0, _emptyThunkAction["default"])(action);
  }

  if (!action.injections) return base;
  var injections = (0, _mergeInjections["default"])(action.injections);
  return _objectSpread(_objectSpread({}, base), injections);
};

var fetchMiddleware = function fetchMiddleware(_ref) {
  var dispatch = _ref.dispatch;
  return function (next) {
    return function (action) {
      return action.service ? dispatch((0, _composeInjections["default"])(ensembleInjections(action))) : next(action);
    };
  };
};

var _default = fetchMiddleware;
exports["default"] = _default;