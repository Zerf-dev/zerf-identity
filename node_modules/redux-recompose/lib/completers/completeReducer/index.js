"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var yup = _interopRequireWildcard(require("yup"));

var _onLoading = _interopRequireDefault(require("../../effects/onLoading"));

var _onSuccess = _interopRequireDefault(require("../../effects/onSuccess"));

var _onFailure = _interopRequireDefault(require("../../effects/onFailure"));

var _onRetry = _interopRequireDefault(require("../../effects/onRetry"));

var _onCancel = _interopRequireDefault(require("../../effects/onCancel"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var schema = yup.object().required().shape({
  primaryActions: yup.array().of(yup.string().typeError('primaryActions should be an array of strings')).typeError('primaryActions should be an array'),
  pollingActions: yup.array().of(yup.string().typeError('pollingActions should be an array of strings')).typeError('pollingActions should be an array'),
  override: yup.object()
}).typeError('reducerDescription should be an object'); // Given a reducer description, it returns a reducerHandler with all success and failure cases

function completeReducer(reducerDescription) {
  schema.validateSync(reducerDescription);
  var _reducerDescription$p = reducerDescription.primaryActions,
      primaryActions = _reducerDescription$p === void 0 ? [] : _reducerDescription$p,
      _reducerDescription$p2 = reducerDescription.pollingActions,
      pollingActions = _reducerDescription$p2 === void 0 ? [] : _reducerDescription$p2,
      _reducerDescription$o = reducerDescription.override,
      override = _reducerDescription$o === void 0 ? {} : _reducerDescription$o;
  var reducerHandler = {};
  primaryActions.forEach(function (actionName) {
    reducerHandler[actionName] = (0, _onLoading["default"])();
    reducerHandler["".concat(actionName, "_SUCCESS")] = (0, _onSuccess["default"])();
    reducerHandler["".concat(actionName, "_FAILURE")] = (0, _onFailure["default"])();
  });
  pollingActions.forEach(function (actionName) {
    reducerHandler[actionName] = (0, _onLoading["default"])();
    reducerHandler["".concat(actionName, "_SUCCESS")] = (0, _onSuccess["default"])();
    reducerHandler["".concat(actionName, "_FAILURE")] = (0, _onFailure["default"])();
    reducerHandler["".concat(actionName, "_RETRY")] = (0, _onRetry["default"])();
    reducerHandler["".concat(actionName, "_CANCEL")] = (0, _onCancel["default"])();
  });
  return _objectSpread(_objectSpread({}, reducerHandler), override);
}

var _default = completeReducer;
exports["default"] = _default;