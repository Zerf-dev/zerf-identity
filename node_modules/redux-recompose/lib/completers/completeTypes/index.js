"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var yup = _interopRequireWildcard(require("yup"));

var customCompleter = function customCompleter(typesCompleters) {
  return typesCompleters.flatMap(function (_ref) {
    var actions = _ref.actions,
        completer = _ref.completer;
    return actions.flatMap(completer);
  });
};

var schema = yup.object().shape({
  primaryActions: yup.array().of(yup.string().typeError('primaryActions should be an array of strings')).typeError('primaryActions should be an array'),
  ignoredActions: yup.array().of(yup.string().typeError('ignoredActions should be an array of strings')).typeError('ignoredActions should be an array'),
  pollingActions: yup.array().of(yup.string().typeError('pollingActions should be an array of strings')).typeError('pollingActions should be an array'),
  customCompleters: yup.array().of(yup.object().shape({
    completer: yup.mixed().test(function (value) {
      return typeof value === 'function';
    }).typeError('completer should be a function'),
    actions: yup.array().of(yup.string().typeError('actions should be an array of strings')).typeError('actions should be an array')
  }))
}).typeError('reducerDescription should be an object');

function completeTypes(params) {
  schema.validateSync(params);
  var _params$primaryAction = params.primaryActions,
      primaryActions = _params$primaryAction === void 0 ? [] : _params$primaryAction,
      _params$ignoredAction = params.ignoredActions,
      ignoredActions = _params$ignoredAction === void 0 ? [] : _params$ignoredAction,
      _params$customComplet = params.customCompleters,
      customCompleters = _params$customComplet === void 0 ? [] : _params$customComplet,
      _params$pollingAction = params.pollingActions,
      pollingActions = _params$pollingAction === void 0 ? [] : _params$pollingAction;
  var primaryTypes = customCompleter([{
    actions: primaryActions,
    completer: function completer(type) {
      return [type, "".concat(type, "_SUCCESS"), "".concat(type, "_FAILURE")];
    }
  }]);
  var pollingTypes = customCompleter([{
    actions: pollingActions,
    completer: function completer(type) {
      return [type, "".concat(type, "_SUCCESS"), "".concat(type, "_FAILURE"), "".concat(type, "_RETRY"), "".concat(type, "_CANCEL")];
    }
  }]);
  var customCompletedTypes = customCompleter(customCompleters);
  return [].concat((0, _toConsumableArray2["default"])(primaryTypes), (0, _toConsumableArray2["default"])(pollingTypes), (0, _toConsumableArray2["default"])(customCompletedTypes), (0, _toConsumableArray2["default"])(ignoredActions));
}

var _default = completeTypes;
exports["default"] = _default;