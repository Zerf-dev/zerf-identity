"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function pollingAction(action) {
  var type = action.type,
      target = action.target,
      service = action.service,
      _action$payload = action.payload,
      payload = _action$payload === void 0 ? function () {} : _action$payload,
      _action$successSelect = action.successSelector,
      successSelector = _action$successSelect === void 0 ? function (response) {
    return response.data;
  } : _action$successSelect,
      _action$failureSelect = action.failureSelector,
      failureSelector = _action$failureSelect === void 0 ? function (response) {
    return response.problem;
  } : _action$failureSelect,
      _action$timeout = action.timeout,
      timeout = _action$timeout === void 0 ? 5000 : _action$timeout,
      shouldRetry = action.shouldRetry,
      _action$determination = action.determination,
      determination = _action$determination === void 0 ? function (response) {
    return response.ok;
  } : _action$determination;
  var selector = typeof payload === 'function' ? payload : function () {
    return payload;
  };
  return {
    prebehavior: function prebehavior(dispatch) {
      return dispatch({
        type: type,
        target: target
      });
    },
    apiCall: function () {
      var _apiCall = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(getState) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", service(selector(getState())));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function apiCall(_x) {
        return _apiCall.apply(this, arguments);
      }

      return apiCall;
    }(),
    determination: determination,
    success: function success(dispatch, response) {
      return dispatch({
        type: "".concat(type, "_SUCCESS"),
        target: target,
        payload: successSelector(response),
        isPolling: true
      });
    },
    failure: function failure(dispatch, response, getState) {
      if (shouldRetry(response, getState)) {
        var timeoutID = setTimeout(function () {
          return dispatch(action);
        }, timeout);
        dispatch({
          type: "".concat(type, "_RETRY"),
          target: target,
          payload: {
            timeoutID: timeoutID,
            error: failureSelector(response)
          }
        });
      } else {
        dispatch({
          type: "".concat(type, "_FAILURE"),
          target: target,
          payload: failureSelector(response),
          isPolling: true
        });
      }
    }
  };
}

var _default = pollingAction;
exports["default"] = _default;