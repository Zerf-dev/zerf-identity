"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function composeInjections(injections) {
  var _injections$prebehavi = injections.prebehavior,
      prebehavior = _injections$prebehavi === void 0 ? function () {} : _injections$prebehavi,
      _injections$apiCall = injections.apiCall,
      apiCall = _injections$apiCall === void 0 ? function () {} : _injections$apiCall,
      _injections$determina = injections.determination,
      determination = _injections$determina === void 0 ? function () {
    return true;
  } : _injections$determina,
      _injections$success = injections.success,
      success = _injections$success === void 0 ? function () {
    return true;
  } : _injections$success,
      _injections$postSucce = injections.postSuccess,
      postSuccess = _injections$postSucce === void 0 ? function () {} : _injections$postSucce,
      _injections$postBehav = injections.postBehavior,
      postBehavior = _injections$postBehav === void 0 ? function () {} : _injections$postBehav,
      _injections$postFailu = injections.postFailure,
      postFailure = _injections$postFailu === void 0 ? function () {} : _injections$postFailu,
      _injections$failure = injections.failure,
      failure = _injections$failure === void 0 ? function () {} : _injections$failure,
      _injections$statusHan = injections.statusHandler,
      statusHandler = _injections$statusHan === void 0 ? function () {
    return true;
  } : _injections$statusHan;
  return /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(dispatch, getState) {
      var response, shouldContinue, _shouldContinue;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              prebehavior(dispatch);
              _context.next = 3;
              return apiCall(getState);

            case 3:
              response = _context.sent;
              postBehavior(dispatch, response);

              if (determination(response, getState)) {
                shouldContinue = success(dispatch, response, getState);
                if (shouldContinue) postSuccess(dispatch, response, getState);
              } else {
                _shouldContinue = statusHandler(dispatch, response, getState);

                if (_shouldContinue) {
                  failure(dispatch, response, getState);
                  postFailure(dispatch, response, getState);
                }
              }

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
}

var _default = composeInjections;
exports["default"] = _default;