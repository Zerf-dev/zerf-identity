"use strict";

var _snakecaseSerializer = _interopRequireDefault(require("./snakecaseSerializer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('SnakecaseSerializer', function () {
  var someObject = {
    id: 1,
    firstName: 'John',
    country_id: 200,
    nickNames: ['johnny', 'dude']
  };
  describe('when no descriptor is passed', function () {
    var serializer = new _snakecaseSerializer.default();
    it('returns all the keys transformed to camelcase', function () {
      expect(serializer.serialize(someObject)).toEqual({
        id: 1,
        first_name: 'John',
        country_id: 200,
        nick_names: ['johnny', 'dude']
      });
    });
  });
  describe('when a descriptor is passed', function () {
    var descriptor = {
      firstName: 'name',
      nickNames: function nickNames(value) {
        return value.map(function (nick) {
          return nick.toUpperCase();
        });
      }
    };
    var serializer = new _snakecaseSerializer.default({
      descriptor: descriptor
    });
    it('returns the descriptor keys with the mapped values and the others as camelcase', function () {
      expect(serializer.serialize(someObject)).toEqual({
        id: 1,
        name: 'John',
        country_id: 200,
        nick_names: ['JOHNNY', 'DUDE']
      });
    });
  });
  describe('when object to serialize has nested objects', function () {
    var nestedObject = {
      someKey: 100,
      myFamily: {
        myFather: 'John',
        myMother: 'Johanna',
        myDaughters: {
          firstDaughter: 'Carla',
          secondDaughter: 'Myriam'
        }
      }
    };
    describe('when a the object has nested objects and no descriptor', function () {
      var serializer = new _snakecaseSerializer.default();
      it('maps all nested keys as camelcase', function () {
        expect(serializer.serialize(nestedObject)).toEqual({
          some_key: 100,
          my_family: {
            my_father: 'John',
            my_mother: 'Johanna',
            my_daughters: {
              first_daughter: 'Carla',
              second_daughter: 'Myriam'
            }
          }
        });
      });
    });
  });
  describe('when a the object to map is an array', function () {
    var array = [{
      keyOne: 'value_one'
    }, {
      keyTwo: 'value_two'
    }];
    var serializer = new _snakecaseSerializer.default({
      descriptor: {
        keyTwo: function keyTwo(v) {
          return "".concat(v, "_2");
        }
      }
    });
    it('maps the array as camelcase in each element', function () {
      expect(serializer.serialize(array)).toEqual([{
        key_one: 'value_one'
      }, {
        key_two: 'value_two_2'
      }]);
    });
  });
  describe('when contains a date object', function () {
    var date = new Date();
    var object = {
      anyDate: date
    };
    var serializer = new _snakecaseSerializer.default();
    it('returns date object as camelcase', function () {
      expect(serializer.serialize(object)).toEqual({
        any_date: date
      });
    });
  });
});