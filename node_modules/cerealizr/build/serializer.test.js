"use strict";

var _serializer = _interopRequireDefault(require("./serializer"));

var _serializerError = _interopRequireDefault(require("./serializerError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('Serializer', function () {
  var someObject = {
    id: 1,
    first_name: 'John',
    country_id: 200,
    nicknames: ['johny', 'dude'],
    unmapped_key: 'no mapping'
  };
  describe('When serializer mapper is valid', function () {
    var descriptor = {
      id: 'id',
      first_name: 'firstName',
      nicknames: 'nicknames',
      country_id: function country_id(key, value) {
        return _defineProperty({}, "".concat(key, "_number"), value + 100);
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor
    });
    it('has exactly the keys defined in the mapper', function () {
      expect(serializer.serialize(someObject)).toEqual({
        id: 1,
        firstName: 'John',
        nicknames: ['johny', 'dude'],
        country_id_number: 300
      });
    });
  });
  describe('when mapAllValues is true and has no default transform', function () {
    var descriptor = {
      id: 'id',
      first_name: 'firstName',
      nicknames: 'nicknames',
      country_id: function country_id(key, value) {
        return _defineProperty({}, "".concat(key, "_number"), value + 100);
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor,
      mapAllValues: true
    });
    it('maps the keys defined in the descriptor and returns the others with no changes', function () {
      expect(serializer.serialize(someObject)).toEqual({
        id: 1,
        firstName: 'John',
        nicknames: ['johny', 'dude'],
        country_id_number: 300,
        unmapped_key: 'no mapping'
      });
    });
    describe('when mapAllValues is true and has a default transform', function () {
      var descriptor = {
        id: 'id',
        first_name: 'firstName',
        nicknames: 'nicknames',
        country_id: function country_id(key, value) {
          return _defineProperty({}, "".concat(key, "_number"), value + 100);
        }
      };
      var serializer = new _serializer.default({
        descriptor: descriptor,
        mapAllValues: true,
        defaultTransform: function defaultTransform(key, value) {
          return _defineProperty({}, key.toUpperCase(), value.toUpperCase());
        }
      });
      it('maps the keys defined in the descriptor and returns the others with the default transform applied', function () {
        expect(serializer.serialize(someObject)).toEqual({
          id: 1,
          firstName: 'John',
          nicknames: ['johny', 'dude'],
          country_id_number: 300,
          UNMAPPED_KEY: 'NO MAPPING'
        });
      });
    });
  });
  describe('when Serializer mapper value is not a string or a function', function () {
    var descriptor = {
      id: 999
    };
    var serializer = new _serializer.default({
      descriptor: descriptor
    });
    it('throws a SerializerError', function () {
      expect(function () {
        return serializer.serialize(someObject);
      }).toThrow(_serializerError.default);
    });
  });
  describe('when Serializer mapper value is a function that returns null', function () {
    var descriptor = {
      id: function id() {
        return null;
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor
    });
    it('throws a SerializerError', function () {
      expect(function () {
        return serializer.serialize(someObject);
      }).toThrow(_serializerError.default);
    });
  });
  describe('when Serializer mapper value is a function that returns a value that is not an object', function () {
    var descriptor = {
      id: function id() {
        return 10;
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor
    });
    it('throws a SerializerError', function () {
      expect(function () {
        return serializer.serialize(someObject);
      }).toThrow(_serializerError.default);
    });
  });
  describe('when Serializer mapper value is a function that returns a value that has more than one key', function () {
    var descriptor = {
      id: function id() {
        return {
          key1: 10,
          key2: 20
        };
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor
    });
    it('throws a SerializerError', function () {
      expect(function () {
        return serializer.serialize(someObject);
      }).toThrow(_serializerError.default);
    });
  });
  describe('when value to be serialized is not an object', function () {
    var value = 10;
    var descriptor = {
      id: function id() {
        return {
          key1: 10,
          key2: 20
        };
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor
    });
    it('throws a SerializerError', function () {
      expect(serializer.serialize(value)).toEqual(10);
    });
  });
  describe('when value to be serialized is an array of objects', function () {
    var someArray = [{
      prop1: 'value1'
    }, {
      prop1: 'value2',
      prop2: {
        key1: 'value1',
        key2: 'value2'
      }
    }, {
      prop3: [1, 2, 3]
    }];
    var descriptor = {
      prop1: 'propOne',
      prop2: function prop2(_, value) {
        return {
          propTwo: value
        };
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor,
      mapAllValues: true
    });
    it('maps the array using the descriptor in each element', function () {
      expect(serializer.serialize(someArray)).toEqual([{
        propOne: 'value1'
      }, {
        propOne: 'value2',
        propTwo: {
          key1: 'value1',
          key2: 'value2'
        }
      }, {
        prop3: [1, 2, 3]
      }]);
    });
  });
  describe('when value to be serialized is an array of array of objects', function () {
    var someArray = [[{
      prop1: 'value1'
    }, {
      prop2: 'value2'
    }]];
    var descriptor = {
      prop1: 'propOne',
      prop2: function prop2(_, value) {
        return {
          propTwo: value
        };
      }
    };
    var serializer = new _serializer.default({
      descriptor: descriptor,
      mapAllValues: true
    });
    it('maps the array using the descriptor in each element', function () {
      expect(serializer.serialize(someArray)).toEqual([[{
        propOne: 'value1'
      }, {
        propTwo: 'value2'
      }]]);
    });
  });
});